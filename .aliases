#!/usr/bin/env zsh
# vim: set fdm=marker:
#   ~/.dotfiles/.aliases

#set -x INFO: DEBUG

# custom functions from $FPATH (prolly ~/.zsh/site-functions)
autoload -Uz \
  ppvar \
  trim-whitespace


function aliasof() {
  local a1=$(alias "$1")
  [[ $a1 == "" ]] && return 1
  echo "$a1" | \grep -qo "^${1}='.*'"
  [[ $? == "0" ]] \
    && echo "$a1" | \sed -E "s|^${1}='(.+)'$|\1|" \
    || echo "$a1" | \sed -E "s|^${1}=(.+)$|\1|"
}

function compdefas() {
  # INFO: https://unix.stackexchange.com/a/6340/99026
  local a
  a="$1"
  shift
  compdef "$_comps[$a]" "${(@)*}=$a"
}

#alias -g rm='trash'
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -iv"

#if [[ $OSX == $TRUE ]]; then
#  export VIMRUNTIME="${BREW}/share/nvim/runtime"
#fi
alias vim="$EDITOR"
alias  vi="$EDITOR"
alias   v="$EDITOR"
alias  vv="/usr/bin/env command -p vim"
#alias  vv="/usr/bin/env VIMRUNTIME=${BREW}/share/vim/vim82 command -p vim"
compdefas "$EDITOR" vim vi v vv

alias -g NULL='>/dev/null'
alias -g NULL1='1>/dev/null'
alias -g NULL2='2>/dev/null'

if [[ $OSX == $TRUE ]]; then
  #alias -g python="python3"
  #alias -g    pip="pip3"
elif [[ $LINUX == $TRUE ]]; then
  alias -g p=pacman
  compdefas pacman p
fi

alias    zshrc="$EDITOR $ZDOTDIR/.zshrc"
alias   zshenv="$EDITOR $ZDOTDIR/.zshenv"
alias   zlogin="$EDITOR $ZDOTDIR/.zlogin"
alias zprofile="$EDITOR $ZDOTDIR/.zprofile"
alias    vimrc="$EDITOR ${DOTFILES:-$HOME}/.vim/vimrc"
compdefas "$EDITOR" zshrc zshenv zprofile vimrc

if command_exists zshz; then
  compdefas zshz z
fi

alias ql='quick-look'

function() { # grc
  [[ `alias whois` == (whois=\'grc)* ]] && return
  local grc_shell
  if [[ $OSX == $TRUE ]]; then
    grc_shell=$BREW/etc/grc.$SHELL_NAME
  elif [[ $LINUX == $TRUE ]]; then
    grc_shell=/etc/grc.$SHELL_NAME
  fi
  [[ -f $grc_shell ]] && source "$grc_shell"
  local colourify='grc -es --colour=auto'
  alias colourify="$colourify"
  alias du="$colourify du"
}

function() { # ls
  local  LSPRG_PRG='ls'
  local LSPRG_ARGS='-LhHGtc'

  if command_exists lsd; then
    export LSDPRG_PRG="command `command which lsd`"
    export LSDPRG_ARGS="`
    printf '--blocks=user,group,size,date,name'
    printf ' --human-readable --size=short'
    printf ' --sort=time --date=relative --reverse'
    printf ' --group-dirs=none --classify'`"
    LSPRG_PRG="$LSDPRG_PRG"
    LSPRG_ARGS="$LSDPRG_ARGS"
    #printf ' --directory-only --total-size' `"
    compdefas ls lsd

    functions -UzWT lsd
    function lsd() {
      readonly func_args="${${@:1}:-.}"
      typeset cmd="${LSDPRG_PRG}" args="${LSDPRG_ARGS}"
      typeset -aU paths=($(trim-whitespace "${func_args[@]}" | xargs printf "%s\n"))
      if [[ ${#paths[@]} -le 0 ]] { paths="${PWD:-/dev/null}" }
      eval "${(Q)cmd} ${(Q)args[@]} ${(qqqq)paths[@]}"; #set +x;
    }

  elif command_exists gls && [[ $OSX == 1 ]] ; then
    #printf ' -ALhHgGtc'
    local GLSPRG_PRG=`command which gls`
    local GLSPRG_ARGS="`
      printf ' -LhHGtc'
      printf ' --color=auto'
      printf ' --group-directories-first'
      printf ' --quoting-style=shell-always' `"
      LSPRG_PRG="$LSDPRG_PRG"
      LSPRG_ARGS="$LSDPRG_ARGS"
    alias gls="${GLSPRG_PRG} ${GLSPRG_ARGS}"

  else
    LSPRG_PRG=`command -pv ls`
    LSPRG_ARGS='-LhHGtc'
    alias gls="${LSPRG_PRG} ${LSPRG_ARGS}"
  fi

  export LSPRG_PRG LSPRG_ARGS

  alias ls >/dev/null && unalias ls
  alias ls="${LSPRG_PRG} ${LSPRG_ARGS}"
  alias  l='ls -1'
  alias ll='ls -1l'
  alias la='nowrap ls -1lA'
  alias lt='ls -1Al --tree --depth=2 --total-size'
  compdefas ls ls l ll la lt
}

alias sudo='nocorrect sudo -E '

alias s='sudo'
compdefas sudo s

alias llog='command -p log'

alias ..='cd ..'
alias ...='cd ../..'

alias less="$PAGER"
alias zless="$PAGER"

#alias htop="htop -u $USER"
alias htop="command sudo htop"

alias psef="ps -ef"
alias pseh="ps -eH --sort=%cpu,%mem --format pid,user,pcpu,pmem,start_time,args"
alias psps="ps --forest --cumulative --sort=+%cpu,+%mem --format pid,user,pcpu,pmem,thcount,start_time,args aaxx"

if command_exists fzf; then
  alias -g F='| fzf'
fi

function() {
  local _grep_prg=$(echo "${GREPPRG:-grep}" | cut -d' ' -f1)
  if command_exists rg; then
    #alias   rg="$_grep_prg"
    alias rgc="$_grep_prg --context=1"
    alias rgf="$_grep_prg --files"
    alias rgg="$_grep_prg --glob"
    #alias grep="$_grep_prg"
    compdefas rg rgc rgf rgg
    alias rgd='rgf --hidden -0 | xargs -0 gdirname | sort | uniq | ghead -n-2'; compdefas head rgd
    alias rgdf='(rgd; rgf) | sort'; compdefas sort rgd
  fi
}

# pip2 install pygments
#alias pcat='pygmentize -O style=monokai -f 256 -g'
alias pcat='pygmentize -O style=base16-default-dark -f 256 -g'
alias c='pcat'
compdefas pygmentize pcat c

alias gtail='grc tail'
alias t='gtail'
compdefas tail gtail t

[[ "$OSX" == "$TRUE" ]] \
  && alias ping='ping -C -c 3 -i 0.2 -W 5000 -t 5 -Q' \
  || alias ping='ping    -c 3'

alias fs='du -shL'
alias dfht='df --human-readable --total --sync --output=source,fstype,size,avail,used,pcent --all'

#alias idea="$EDITOR ~/Dropbox/ideas.md"

alias colortest='~/.config/base16-shell/colortest'

#function pyeve() { eval "`~/bin/pyeve ${1:-';'}`" }

alias chmod='command -p chmod'
alias chown='command -p chown'
alias chgrp='command -p chgrp'


alias info='command -p info --vi-keys'

function ifs-reset() {
  local _ifs_default=$'\ \t\n\0'
  if [[ ! $IFS = $_ifs_default ]]; then
    printf 'üë¥üèΩ _old_ IFS=%q\n' "$IFS"
    IFS=$_ifs_default
    printf 'üë∂üèΩ ~new~ IFS=%q\n' "$IFS"
  fi
  echo '‚úÖ IFS reset!'
}

# shell output line wrapping
alias wrapoff='tput rmam'
alias  wrapon='tput smam'
alias nowrap='nowrap '


# git

alias  gc='git commit'
alias gca='git commit -a'
alias  gd='git diff 2>/dev/null'
alias gdd='git diff --color-words 2>/dev/null'
alias  gl='git log'
alias  gp='git push'
alias grv='git remote -v'
alias gst='git status'
alias  ga='git add'
alias gco='git checkout'
alias gcm='git checkout master'

compdefas git gc gca gd gdd gl gp grv gst ga gco gcm

alias ghclone='cd "$(git gh `pbpaste | tr "'"/"'" "'"  "'"`)" && :'
alias get='cd "$(ghq-get)"'


function _tree() {
  #-D -c \
  local gitignore="$HOME/.config/git/ignore"
  if [[ -f $gitignore ]];
  then local ignores=$(cat "$gitignore" | grep -v '^$' | xargs | tr '\ ' '|')
  else local ignores='node_modules|bower_components|vendor|bundle|target|build|public|.git|env'; fi
  command tree \
    --du \
    --filelimit 512 \
    --prune \
    -F -L 4 \
    -h \
    -I "$ignores" \
    "$@"
}

alias tree='_tree --du --si --filelimit 512 -I "node_modules|bower_components|vendor|bundle|target|build|public|.git|env|__pycache__" -L 5'

#alias phpcs='phpcs --standard=ruleset.xml --extensions=php --ignore=node_modules,bower_components,vendor -n -s'

function yass() {
  local res=${?:-$1};
  if [[ $res == 0 ]];
  then echo "‚úÖ yass üë∏üèæ res='$res'"
  else echo "‚ùó nahh ü§¨ res='$res'"
  fi
  return "$res"
}
#alias yass='[[ $? == 0 ]] && (echo "‚úÖ yass üë∏üèæ 0"; true) || (echo "‚ùó nahh ü§¨ 1"; false)'

alias groups-reload='exec sudo su -l $USER'

function npm-do() {
  #INFO: depracated; use `npx`
  (PATH="$(npm bin):$PATH"; eval "$@";)
}

# INFO: https://askubuntu.com/a/1125667
function trimpath {
  PATH=${PATH%:*}
}


# pyenv
#function gpip()  {env PIP_REQUIRE_VIRTUALENV='' python -m pip  "$@"}
#function gpip2() {env PIP_REQUIRE_VIRTUALENV='' python -m pip2 "$@"}
#function gpip3() {env PIP_REQUIRE_VIRTUALENV='' python -m pip3 "$@"}

# asdf-vm

#alias   pip='python  -m pip'
alias  gpip='python  -m pip'

#alias  pip2='python  -m pip'
alias gpip2='python  -m pip'

#alias  pip3='python3 -m pip'
alias gpip3='python3 -m pip'

#compdefas pip pip pip2 pip3 gpip gpip2 gpip3
compdefas pip pip pip2 pip3 gpip gpip2 gpip3
#function gpip2() {env PIP_REQUIRE_VIRTUALENV='' python -m pip2 "$@"}
#function gpip3() {env PIP_REQUIRE_VIRTUALENV='' python -m pip3 "$@"}

#alias pyenv-init='eval "$(pyenv init -)"; eval "$(pyenv virtualenv-init -)"'

function jps() { local pids=$(pgrep -fai "$@"); [[ $? == 0 ]] && ps aux -p "$pids" }

alias nextdns-diag='sh -c "$(curl -s https://nextdns.io/diag)"'

#alias setx-wrap='(){ set -x; "$@"; set +x }'
#function setx-wrap() { set -x; "$@"; set +x }
#alias setx-wrap='(){ set -x; `aliasof "$@"`; set +x }'
alias setx-wrap='(){ set -x; $@; set +x }'


# Coreutils (macOS / OSX) {{{
if [[ $OSX == $TRUE ]]; then
  #alias locate=`command -pv locate`
  #alias updatedb='/usr/libexec/locate.updatedb'
  alias dirname='command -p dirname'
fi
# }}}


#set +x INFO: DEBUG
