#!/usr/bin/env zsh -e
#   ~/.dotfiles/.aliases


alias rm='trash'

alias vim="$EDITOR"
alias  vi="$EDITOR"
alias   v="$EDITOR"

if [[ "$OSX" == "$TRUE" ]]; then
  alias python="python3"
  alias    pip="pip3"
fi
#[[ "$OSX" == "$TRUE" ]] \
    #&& alias python="python3.6.9" \
    #|| alias python3="python3.7.4"

function aliasof() {
  local a1=$(alias "$1")
  [[ $a1 == "" ]] && return 1
  echo "$a1" | \grep -qo "^${1}='.*'"
  [[ $? == "0" ]] \
    && echo "$a1" | \sed -E "s|^${1}='(.+)'$|\1|" \
    || echo "$a1" | \sed -E "s|^${1}=(.+)$|\1|"
}

alias    zshrc='$EDITOR $ZDOTDIR/.zshrc'
alias   zshenv='$EDITOR $ZDOTDIR/.zshenv'
alias   zlogin='$EDITOR $ZDOTDIR/.zlogin'
alias zprofile='$EDITOR $ZDOTDIR/.zprofile'
alias    vimrc='$EDITOR ${DOTFILES:-$HOME}/.vim/vimrc'

if command_exists zshz; then
  compdef _zshz z=zshz
fi

alias ql='quick-look'

function() { # ls
  local  LSPRG_PRG='ls'
  local LSPRG_ARGS=' -LhHGstc'

  if command_exists gls; then
    #local LSPRG_PRG="`which -p gls ls | head -n1 | xargs basename`"
    #if [[ "$LSPRG_PRG" == 'gls' ]]; then echo 'has gls'; fi
    local GLSPRG_PRG='gls'
    local GLSPRG_ARGS="`
      printf ' -LhHGstc'
      printf ' --color=auto'
      printf ' --group-directories-first'
      printf ' --quoting-style=shell-always' `"
    alias gls="${GLSPRG_PRG} ${GLSPRG_ARGS}"
    LSPRG_PRG="$GLSPRG_PRG"
    LSPRG_ARGS="$GLSPRG_ARGS"
  fi

  if command_exists lsd; then
    alias lsd >/dev/null && unalias lsd
    local LSDPRG_PRG='lsd'
    local LSDPRG_ARGS="`
      printf ' --blocks=date,size,user,name'
      printf ' --human-readable --size=short'
      printf ' --timesort --date=relative --reverse'
      printf ' --group-dirs=first --classify' `"
    alias lsd="${LSDPRG_PRG} ${LSDPRG_ARGS}"
    LSPRG_PRG="$LSDPRG_PRG"
    LSPRG_ARGS="$LSDPRG_ARGS"
  fi

  alias ls='\'"${LSPRG_PRG} ${LSPRG_ARGS}"
  alias  l='ls -1'
  alias ll='ls -1l'
  alias la='nowrap ls -1lA'
  alias lt='ls -1Al --tree --depth=2'
}

alias sudo='nocorrect sudo -E '

alias   s='sudo'
compdef s=sudo

alias llog='command -p log'

alias ..='cd ..'
alias ...='cd ../..'

alias less='$PAGER'
alias zless='$PAGER'

alias htop='htop -u $USER'

_grep_prg=$(echo "${GREPPRG:-grep}" | cut -d' ' -f1)
if command_exists rg; then
  alias   rg="$_grep_prg"      ; compdef   rg="$_grep_prg"
  alias  rgg="$_grep_prg -C=0" ; compdef  rgg="$_grep_prg"
  #alias grep="$_grep_prg -C=0" ; compdef grep="$_grep_prg"
else
  alias   rg="$_grep_prg"      ; compdef   rg="$_grep_prg"
  alias  rgg="$_grep_prg"      ; compdef  rgg="$_grep_prg"
  #alias grep="$_grep_prg"      ; compdef grep="$_grep_prg"
fi

# pip2 install pygments
#alias pcat='pygmentize -O style=monokai -f 256 -g'
alias pcat='pygmentize -O style=base16-default-dark -f 256 -g'
alias c='pcat'
compdef pcat=pygmentize
compdef    c=pygmentize


[[ "$OSX" == "$TRUE" ]] \
  && alias ping='grc ping -C -c 3 -i 0.2 -W 5000 -t 5 -Q' \
  || alias     ping='ping    -c 3'

alias fs='du -shL'

alias idea='$EDITOR ~/Dropbox/ideas.md'

alias colortest='~/.config/base16-shell/colortest'

function pyeve() { eval "`~/bin/pyeve ${1:-';'}`" }

#alias chmod='command -p chmod'
#alias chown='command -p chown'
#alias chgrp='command -p chgrp'


alias info='command -p info --vi-keys'

function ifs-reset() {
  local _ifs_default=$'\ \t\n\0'
  if [[ ! $IFS = $_ifs_default ]]; then
    printf '👴🏽 _old_ IFS=%q\n' "$IFS"
    IFS=$_ifs_default
    printf '👶🏽 ~new~ IFS=%q\n' "$IFS"
  fi
  echo '✅ IFS reset!'
}

# shell output line wrapping
alias wrapoff='tput rmam'
alias  wrapon='tput smam'
alias nowrap='nowrap '


# git
alias gc='git commit'
alias gca='git commit -a'
alias  gd='git diff'
alias gdd='git diff --color-words'
alias gl='git log'
alias gp='git push'
alias grv='git remote -v'
alias gst='git status'
alias ga='git add'
alias gco='git checkout'
alias gcm='git checkout master'

alias ghclone='cd "$(git gh `pbpaste | tr "'"/"'" "'"  "'"`)" && :'


function ghq-get() {
  local x="$(
    if [[ ${OSX:-0} == ${TRUE:-1} ]]; then
      pbpaste
    elif [[ ${LINUX:-0} == ${TRUE:-1} ]]; then
      xclip -out
    fi)"
  ghq get -u -p --shallow "$x" 1>&2
  echo "$(ghq root)/$(ghq list "$x")"
}
alias get='cd "$(ghq-get)"'

function tree() {
  #-D -c \
  /usr/bin/env tree \
    --du \
    --filelimit 512 \
    --prune \
    -F -L 4 \
    -h \
    -I "node_modules|bower_components|vendor|bundle|target|build|public|.git" \
    "$@"
}
#alias tree='tree --du --si --filelimit 512 -I "node_modules|bower_components|vendor|bundle|target|build|public|.git" -L 5'

alias phpcs='phpcs --standard=ruleset.xml --extensions=php --ignore=node_modules,bower_components,vendor -n -s'


function echoer() {
  printf "%s\n" "$*" >&2;
}


function gencomp_all() {
  for p in $path; do command -p ls $p; done |\
    uniq |\
    { while read c; do gencomp $c; done }
}


function trnl() {
    tr "${1:-':'}" '\n'
}

function mktempf() {
    fpref="${DOTFILES_PACKAGE:-"$USER"_`basename $SHELL`}"
    tempf="${fpref}.${1:-$0}.XXXX"
    mktemp -t "${tempf}" 2>/dev/null || (
        read -d '' errmsg<<-"EOF"
			%s - error
			    \$TMPDIR = "%s"
			    \$tempf  = "%s"
		EOF
        echo "$0" "$TMPDIR" "$tempf" | echoer
    )
}

function ppvar() {
    local tempf=`mktempf`
    exec 3>&2 2>$tempf
    local var_name=`echo "${1:-PATH}" | tr -d '$'`
    echoer "$0"' - pretty print env vars'
    echoer $'\tvar name\t-> '"$var_name"''
    local plines=$(eval echo \${$var_name} | trnl "${2:-':'}")
    echoer $'\titem count\t-> '"$(echo "$plines" | wc -l | xargs)"
    echo "$plines"
    exec 2>&3 3>&-
    xargs -0 printf '\n%s\n' >&2 < $tempf
}


function npm-do {
    (PATH=$(npm bin):$PATH; eval $@;)
}


# pyenv
function gpip()  {PIP_REQUIRE_VIRTUALENV='' pip  "$@"}
function gpip2() {PIP_REQUIRE_VIRTUALENV='' pip2 "$@"}
function gpip3() {PIP_REQUIRE_VIRTUALENV='' pip3 "$@"}

alias pyenv-init='eval "$(pyenv init -)"; eval "$(pyenv virtualenv-init -)"'
