#!/usr/bin/env zsh


autoload -Uz bin-abort ba-err echoer
trap 'bin-abort' ERR


# OSX - use gdate from GNU Coreutils
scriptname="$(command -p ls "$0" | xargs basename)"

function get_datetime() {
    local date_fmt='%s.%N'
    if [[ $OSTYPE =~ "darwin" ]] && `which gdate >/dev/null`; then
        gdate +$date_fmt
    else
        date +$date_fmt
    fi
}

start_time=$(get_datetime)

function log_section() {
    echo "$scriptname: ${@}"
}

function log_section_start() {
    local section_start_time=$(get_datetime)
    local elapsed_time=$(printf "%.3g" $(( section_start_time - start_time )))
    echo
    log_section "START | $@ | started at $elapsed_time seconds"
    #start_time=$(get_datetime)
}
function log_section_end() {
    local stop_time=$(get_datetime)
    local elapsed_time=$(printf "%.3g" $(( stop_time - start_time )))
    log_section "END | $@ | took $elapsed_time seconds"
    echo
}


function() {
    local osasdfdir=
    if   [[ $OSX == 1   ]]; then oasdfdir="$BREW/opt/asdf";
    elif [[ $LINUX == 1 ]]; then oasdfdir="/opt/asdf-vm"; fi
    source "${ASDF_DIR:-$osasdfdir}/asdf.sh"
}


function() {
    local section="asdf"
    log_section_start "$section"

    asdf update || true
    asdf plugin-update --all

    log_section_end "$section"
}


function() {
    local section="Python, Pyenv, pip"
    log_section_start "$section"

    asdf install python && asdf plugin-update python
    local pip_reqs="${ASDF_PYTHON_DEFAULT_PACKAGES_FILE:-~/.default-python-packages}"
    asdf exec python3 -m pip install -U -r "$pip_reqs"
    asdf reshim python

    log_section_end "$section"
}


function() {
    local section="Node.js, npm, nvm"
    log_section_start "$section"

    asdf plugin-update nodejs && asdf install nodejs
    asdf plugin-update yarn   && asdf install yarn

    local node_versions=$(cat ~/.tool-versions | grep nodejs | sed 's/nodejs\ //' | tac -rs '\s\+')
    local yarn_reqs=$(cat ${ASDF_YARN_DEFAULT_PACKAGES_FILE:-~/.default-yarn-packages} | xargs)
    for v (${(z)node_versions}) {
        asdf shell nodejs "$v"
        asdf exec yarn global add ${(z)yarn_reqs[@]}
        #asdf exec npm install -g --force "${(z)yarn_reqs[@]}"
        asdf exec yarn global upgrade
    }
    asdf shell nodejs --unset
    asdf reshim nodejs "$v"
    asdf reshim yarn

    log_section_end "$section"
}


function() { # Rust, rustup, Cargo
    local section="Rust, rustup, Cargo"
    log_section_start "$section"

    local cargo_rels=(
        stable
        #beta
        #nightly-2020-07-11
        #nightly-2020-07-12
    )

    local cargo_reqs=(
        #racer
        #clippy
    )

    local ru_comps=(
        cargo
        clippy
        llvm-tools
        miri
        rls
        rust
        rust-analysis
        rust-analyzer
        rust-docs
        rust-src
        rust-std
        rustc
        rustc-dev
        rustfmt
    )

    asdf install rust && asdf plugin-update rust
    for rel (${cargo_rels}) {
        asdf exec rustup update "$rel"
        for ru_comp (${ru_comps}) {
            true && \
                rustup component add --toolchain="$rel" "$ru_comp" || \
                rustup component add --toolchain="$rel" "${ru_comp}-preview" || \
                true
        }
        #for req in $cargo_reqs; do
            #cargo +"$rel" install "$req" \
                #2>/dev/null || true
        #done
    }
    asdf reshim rust

    log_section_end "$section"
}


function() { # Ruby, Gem
    local section="Ruby, Gem"
    log_section_start "$section"

    asdf install ruby && asdf plugin-update ruby

    local gem_reqs=(
        bundler
        neovim
    )
    for r (${gem_reqs}) {
        asdf exec gem install "$r"
    }

    log_section_end "$section"
}


function() { # Golang
    local section="Golang"
    log_section_start "$section"

    asdf install golang && asdf plugin-update golang

    local goget_reqs=(
        github.com/nsf/gocode
    )
    for r (${goget_reqs}) {
        asdf exec go get -u "$r"
    }
    asdf reshim golang

    log_section_end "$section"
}


# NOTE: build/install editor binaries second-to-last
function() {
    local section="OS package manager"
    log_section_start "$section"

    if [[ $OSTYPE =~ "darwin" ]]; then # OSX
        # local brew_reqs=(
        #     vim
        #     neovim
        # )
        # for r in ${brew_reqs}; do
        #     brew ls --versions "$r" > /dev/null || brew install "$r"
        # done

        # FIXME: brew sux
        local neovim_brew_cache="$HOME/Library/Caches/Homebrew/neovim--git"
        if which -p nvim >/dev/null && [[ -d $neovim_brew_cache ]]; then
            cd "$neovim_brew_cache"
            git fetch origin --tags --force
            cd -
            brew upgrade neovim --fetch-HEAD --keep-tmp
        elif `which -p nvim >/dev/null`; then
            #brew uninstall neovim --ignore-dependencies
            brew reinstall --keep-tmp neovim
        else
            brew install --fetch-HEAD --keep-tmp neovim --HEAD
        fi

    elif [[ -f /etc/manjaro-release ]]; then # Manjaro (Arch-based)
        # local pamac_reqs=(
        #     neovim-nightly)
        # for r in ${pamac_reqs};
        #     echo "> pamac reinstall ${r}"
        #     pacman -Q "$r" || pamac reinstall "$r"
    fi

    log_section_end "$section"
}


function() {
    local section="Editor Plugins"
    log_section_start "$section"

    local editor=${EDITOR:-nvim}

    ${editor} --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'

    log_section_end "$section"
}

